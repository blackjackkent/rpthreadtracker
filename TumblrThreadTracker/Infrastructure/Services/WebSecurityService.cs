namespace TumblrThreadTracker.Infrastructure.Services
{
	using System;
	using System.IO;
	using System.Linq;
	using System.Security.Claims;
	using System.Text;
	using System.Threading.Tasks;
	using System.Web.Security;

	using SendGrid.Helpers.Mail;

	using TumblrThreadTracker.Interfaces;
	using TumblrThreadTracker.Models.DomainModels.Account;
	using TumblrThreadTracker.Models.DomainModels.Users;

	using WebMatrix.WebData;

	public class WebSecurityService : IWebSecurityService
	{
		private readonly IRepository<User> _userProfileRepository;

		public WebSecurityService(IRepository<User> userProfileRepository)
		{
			_userProfileRepository = userProfileRepository;
		}

		public bool ChangePassword(string username, string oldPassword, string newPassword)
		{
			return WebSecurity.ChangePassword(username, oldPassword, newPassword);
		}

		public void CreateAccount(string username, string password, string email, IRepository<User> userProfileRepository)
		{
			WebSecurity.CreateUserAndAccount(username, password);
			var profile = new User
				              {
					              UserId = WebSecurity.GetUserId(username),
					              UserName = username,
					              Email = email,
					              ShowDashboardThreadDistribution = true
				              };
			userProfileRepository.Update(profile.UserId, profile);
		}

		public string GeneratePasswordResetToken(User user)
		{
			return WebSecurity.GeneratePasswordResetToken(user.UserName);
		}

		public User GetCurrentUserFromIdentity(ClaimsIdentity claimsIdentity)
		{
			if (claimsIdentity == null) return null;
			var claim = claimsIdentity.Claims.FirstOrDefault(c => c.Type == "userId");
			if (claim == null) return null;
			var userId = int.Parse(claim.Value);
			return _userProfileRepository.GetSingle(u => u.UserId == userId);
		}

		public int? GetCurrentUserIdFromIdentity(ClaimsIdentity claimsIdentity)
		{
			if (claimsIdentity == null) return null;
			var claim = claimsIdentity.Claims.FirstOrDefault(c => c.Type == "userId");
			if (claim == null) return null;
			var userId = int.Parse(claim.Value);
			return userId;
		}

		public int? GetUserIdByUsernameAndPassword(string username, string password)
		{
			var userExistsWithUsername = Membership.Provider.ValidateUser(username, password);
			if (userExistsWithUsername)
			{
				return WebSecurity.GetUserId(username);
			}

			var userByEmail = _userProfileRepository.GetSingle(u => u.Email == username);
			if (userByEmail == null)
			{
				return null;
			}

			var usernameFromEmailIsValid = Membership.Provider.ValidateUser(userByEmail.UserName, password);
			return usernameFromEmailIsValid ? WebSecurity.GetUserId(userByEmail.UserName) : (int?)null;
		}

		public string ResetPassword(string resetToken)
		{
			var newPassword = GenerateRandomPassword(6);
			var response = WebSecurity.ResetPassword(resetToken, newPassword);
			if (!response)
			{
				throw new InvalidOperationException();
			}
			return newPassword;
		}

		public string GenerateRandomPassword(int length)
		{
			const string AllowedChars = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789!@$?_-*&#+";
			var chars = new char[length];
			var rd = new Random();
			for (var i = 0; i < length; i++)
			{
				chars[i] = AllowedChars[rd.Next(0, AllowedChars.Length)];
			}
			return new string(chars);
		}

		public async Task SendForgotPasswordEmail(User user, string token, IRepository<WebpagesMembership> webpagesMembershipRepository, IEmailService emailService)
		{
			var isValidToken = IsValidToken(user, token, webpagesMembershipRepository);
			if (!isValidToken)
			{
				throw new InvalidDataException();
			}
			var newPassword = ResetPassword(token);
			await SendTemporaryPasswordEmail(user, newPassword, emailService);
		}

		private bool IsValidToken(User user, string resetToken, IRepository<WebpagesMembership> webpagesMembershipRepository)
		{
			var record = webpagesMembershipRepository.Get(m => m.UserId == user.UserId && m.PasswordVerificationToken == resetToken);
			return record.Any();
		}

		private async Task SendTemporaryPasswordEmail(User user, string newPassword, IEmailService emailService)
		{
			const string Subject = "RPThreadTracker ~ New Temporary Password";
			var bodyBuilder = new StringBuilder();
			bodyBuilder.Append("<p>Hello,</p>");
			bodyBuilder.Append("<p>Below is your autogenerated temporary password for RPThreadTracker:</p>");
			bodyBuilder.Append("<p>" + newPassword + "</p>");
			bodyBuilder.Append(
				"<p>Use this password to log into the tracker; be sure to change your password to something secure once you are logged in.</p>");
			bodyBuilder.Append("<p>Thanks, and have a great day!</p>");
			bodyBuilder.Append("<p>~Tracker-mun</p>");
			var body = bodyBuilder.ToString();
			await emailService.SendEmail(user.Email, Subject, body);
		}
	}
}