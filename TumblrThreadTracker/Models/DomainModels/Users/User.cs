namespace TumblrThreadTracker.Models.DomainModels.Users
{
	using System;
	using System.IO;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;

	using TumblrThreadTracker.Interfaces;
	using TumblrThreadTracker.Models.DomainModels.Account;

	public class User : DomainModel
	{
		public User()
		{
		}

		public User(UserDto dto)
		{
			UserId = dto.UserId;
			UserName = dto.UserName;
			Email = dto.Email;
			LastLogin = dto.LastLogin;
			ShowDashboardThreadDistribution = dto.ShowDashboardThreadDistribution;
			UseInvertedTheme = dto.UseInvertedTheme;
		}

		public string Email { get; set; }

		public DateTime? LastLogin { get; set; }

		public bool ShowDashboardThreadDistribution { get; set; }

		public bool UseInvertedTheme { get; set; }

		public int UserId { get; set; }

		public string UserName { get; set; }

		public async Task SendForgotPasswordEmail(
			string token,
			IRepository<WebpagesMembership> webpagesMembershipRepository,
			IEmailService emailService,
			IWebSecurityService securityService)
		{
			var isValidToken = IsValidToken(token, webpagesMembershipRepository);
			if (!isValidToken) throw new InvalidDataException();
			var newPassword = ResetPassword(token, securityService);
			await SendTemporaryPasswordEmail(newPassword, emailService);
		}

		public void SetLastLogin(DateTime date, IRepository<User> userProfileRepository)
		{
			LastLogin = date;
			userProfileRepository.Update(UserId, this);
		}

		public UserDto ToDto()
		{
			return new UserDto
				       {
					       UserId = UserId,
					       Email = Email,
					       UserName = UserName,
					       LastLogin = LastLogin,
					       ShowDashboardThreadDistribution = ShowDashboardThreadDistribution,
					       UseInvertedTheme = UseInvertedTheme
				       };
		}

		private static string GenerateRandomPassword(int length)
		{
			const string allowedChars = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789!@$?_-*&#+";
			var chars = new char[length];
			var rd = new Random();
			for (var i = 0; i < length; i++) chars[i] = allowedChars[rd.Next(0, allowedChars.Length)];
			return new string(chars);
		}

		private bool IsValidToken(string resetToken, IRepository<WebpagesMembership> webpagesMembershipRepository)
		{
			var record =
				webpagesMembershipRepository.Get(m => m.UserId == UserId && m.PasswordVerificationToken == resetToken);
			return record.Any();
		}

		private string ResetPassword(string resetToken, IWebSecurityService webSecurityService)
		{
			var newPassword = GenerateRandomPassword(6);
			var response = webSecurityService.ResetPassword(resetToken, newPassword);
			if (!response) throw new InvalidOperationException();
			return newPassword;
		}

		private async Task SendTemporaryPasswordEmail(string newPassword, IEmailService emailService)
		{
			const string subject = "RPThreadTracker ~ New Temporary Password";
			var bodyBuilder = new StringBuilder();
			bodyBuilder.Append("<p>Hello,</p>");
			bodyBuilder.Append("<p>Below is your autogenerated temporary password for RPThreadTracker:</p>");
			bodyBuilder.Append("<p>" + newPassword + "</p>");
			bodyBuilder.Append(
				"<p>Use this password to log into the tracker; be sure to change your password to something secure once you are logged in.</p>");
			bodyBuilder.Append("<p>Thanks, and have a great day!</p>");
			bodyBuilder.Append("<p>~Tracker-mun</p>");
			var body = bodyBuilder.ToString();
			await emailService.SendEmail(Email, subject, body);
		}
	}
}